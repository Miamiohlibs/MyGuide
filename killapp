#!/bin/bash

DO_RESTART=false;
while getopts ":r" opt; do
    case ${opt} in
	r ) DO_RESTART=true;
	    ;;
	\? ) echo "Usage: killapp [-r]"
	    ;;
    esac
done

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# check $ALLOWED_USERS
ALLOWED_USERS=`node utilities/getConfig.js allowedUsersCommaSeparated`
if [ -z "${ALLOWED_USERS}" ] 
then 
    printf "${YELLOW}No 'ALLOWED_USERS' value set in '.env'.\nValue must be set to proceed\n\nExample:\n${GREEN}ALLOWED_USERS='root,someotheruser'\n\n${NC}" && exit 1
fi
IFS=', ' read -r -a array <<< "$ALLOWED_USERS"
USER=`whoami`
ALLOWED="false"
for i in "${array[@]}"
do
    if [ "$i" == "$USER" ]
    then
        ALLOWED="true"
    fi
done

# stop script if user not permitted to restart
if [ "$ALLOWED" == "false" ] 
then
    printf "${RED}User ${YELLOW}$USER${RED} not allowed to start/restart app; try sudo?${NC}\n" 
    printf "${YELLOW}Allowed users listed in .env, but actual permissions are be set elsewhere\naccording to your setup.${NC}\n" && exit 1
fi


procline=`ps ax | grep node | grep -i MyGuide`
proc=`ps ax | grep node | grep -i MyGuide | { read a _; echo "$a"; }`
kill $proc
reset
echo $procline
printf "${YELLOW}killing $proc ...${NC}\n"
printf "${GREEN}done${NC}\n"

if [ $DO_RESTART = true ]; then
    # printf "${YELLOW}\nRUNNING PREFLIGHT CHECK...${NC}\n";
    # npm run check
    printf "${YELLOW}\nRESTARTING SERVER...${NC}\n";
    npm run server > /dev/null 2>&1 &
else 
    printf "restart server with: ${CYAN}npm run server${NC}\n\n"
fi
